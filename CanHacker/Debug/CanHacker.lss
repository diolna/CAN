
CanHacker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ef4  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000014ce  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	a2 c0       	rjmp	.+324    	; 0x17a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include "mcp2515.h"




int main() {
  38:	df 93       	push	r29
  3a:	cf 93       	push	r28
  3c:	cd b7       	in	r28, 0x3d	; 61
  3e:	de b7       	in	r29, 0x3e	; 62
  40:	cf 5f       	subi	r28, 0xFF	; 255
  42:	d0 40       	sbci	r29, 0x00	; 0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
	setup_spi(SPI_MODE_0, SPI_LSB, SPI_NO_INTERRUPT, SPI_MSTR_CLK128);
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	61 e0       	ldi	r22, 0x01	; 1
  52:	70 e0       	ldi	r23, 0x00	; 0
  54:	40 e0       	ldi	r20, 0x00	; 0
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	23 e0       	ldi	r18, 0x03	; 3
  5a:	4c d0       	rcall	.+152    	; 0xf4 <_Z9setup_spihiih>

	uint8_t data[255];
	data[0] = 0;
  5c:	19 82       	std	Y+1, r1	; 0x01
  5e:	9e 01       	movw	r18, r28
  60:	2f 5f       	subi	r18, 0xFF	; 255
  62:	3f 4f       	sbci	r19, 0xFF	; 255
  64:	f9 01       	movw	r30, r18
	for(uint8_t i = 0; i < 255; i++){
  66:	ae 01       	movw	r20, r28
  68:	40 50       	subi	r20, 0x00	; 0
  6a:	5f 4f       	sbci	r21, 0xFF	; 255
		data[i]= i;
  6c:	8e 2f       	mov	r24, r30
  6e:	82 1b       	sub	r24, r18
  70:	81 93       	st	Z+, r24
int main() {
	setup_spi(SPI_MODE_0, SPI_LSB, SPI_NO_INTERRUPT, SPI_MSTR_CLK128);

	uint8_t data[255];
	data[0] = 0;
	for(uint8_t i = 0; i < 255; i++){
  72:	e4 17       	cp	r30, r20
  74:	f5 07       	cpc	r31, r21
  76:	d1 f7       	brne	.-12     	; 0x6c <__SREG__+0x2d>
		data[i]= i;
 	}


	mcp2515_loadMSG(mcp_tx_txb1, data, 255);
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	be 01       	movw	r22, r28
  7c:	6f 5f       	subi	r22, 0xFF	; 255
  7e:	7f 4f       	sbci	r23, 0xFF	; 255
  80:	4f ef       	ldi	r20, 0xFF	; 255
  82:	13 d0       	rcall	.+38     	; 0xaa <mcp2515_loadMSG>



while(1){
setup_spi(SPI_MODE_0, SPI_LSB, SPI_NO_INTERRUPT, SPI_MSTR_CLK128);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	23 e0       	ldi	r18, 0x03	; 3
  90:	31 d0       	rcall	.+98     	; 0xf4 <_Z9setup_spihiih>
send_spi(0b0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	6d d0       	rcall	.+218    	; 0x170 <_Z8send_spih>
send_spi(0b1);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	6b d0       	rcall	.+214    	; 0x170 <_Z8send_spih>
  9a:	f4 cf       	rjmp	.-24     	; 0x84 <__SREG__+0x45>

0000009c <internal_spiChipSelect>:
}

/****/

static void internal_spiChipSelect(uint8_t state) {
	if(!state) {
  9c:	88 23       	and	r24, r24
  9e:	11 f4       	brne	.+4      	; 0xa4 <internal_spiChipSelect+0x8>
		/* Upper the CS pin */
		PORT_SPI |= (1<<SPI_SS_PIN);
  a0:	c2 9a       	sbi	0x18, 2	; 24
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <internal_spiChipSelect+0xa>
		DDR_SPI |= (1<<SPI_SS_PIN);
	} else {
		/* Lower the CS pin */
		PORT_SPI &= ~(1<<SPI_SS_PIN);
  a4:	c2 98       	cbi	0x18, 2	; 24
		DDR_SPI |= (1<<SPI_SS_PIN);
  a6:	ba 9a       	sbi	0x17, 2	; 23
  a8:	08 95       	ret

000000aa <mcp2515_loadMSG>:
	internal_spiChipSelect(0);

	return size;
}

void mcp2515_loadMSG(mcp2515_txb txb, uint8_t *data, uint8_t len) {
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	18 2f       	mov	r17, r24
  b8:	06 2f       	mov	r16, r22
  ba:	f7 2e       	mov	r15, r23
  bc:	e4 2e       	mov	r14, r20
	uint8_t idx;

	// Enable the chip
	internal_spiChipSelect(1);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	ed df       	rcall	.-38     	; 0x9c <internal_spiChipSelect>

	// Send WRITE instruction, register address and values
	send_spi(MCP2515_INSTR_WRITE);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	55 d0       	rcall	.+170    	; 0x170 <_Z8send_spih>
	send_spi(MCP2515_REG_TXB0D0 + txb);
  c6:	81 2f       	mov	r24, r17
  c8:	8a 5c       	subi	r24, 0xCA	; 202
  ca:	52 d0       	rcall	.+164    	; 0x170 <_Z8send_spih>
  cc:	20 2f       	mov	r18, r16
  ce:	3f 2d       	mov	r19, r15
  d0:	c9 01       	movw	r24, r18
  d2:	ec 01       	movw	r28, r24
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	03 c0       	rjmp	.+6      	; 0xde <mcp2515_loadMSG+0x34>
	for(idx = 0; idx < len; idx++)
		send_spi(data[idx]);
  d8:	89 91       	ld	r24, Y+
  da:	4a d0       	rcall	.+148    	; 0x170 <_Z8send_spih>
	internal_spiChipSelect(1);

	// Send WRITE instruction, register address and values
	send_spi(MCP2515_INSTR_WRITE);
	send_spi(MCP2515_REG_TXB0D0 + txb);
	for(idx = 0; idx < len; idx++)
  dc:	1f 5f       	subi	r17, 0xFF	; 255
  de:	1e 15       	cp	r17, r14
  e0:	d8 f3       	brcs	.-10     	; 0xd8 <mcp2515_loadMSG+0x2e>
		send_spi(data[idx]);

	// Disable the chip
	internal_spiChipSelect(0);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	db df       	rcall	.-74     	; 0x9c <internal_spiChipSelect>
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	ff 90       	pop	r15
  f0:	ef 90       	pop	r14
  f2:	08 95       	ret

000000f4 <_Z9setup_spihiih>:

//#ifdef __cplusplus
//extern "C"{
//#endif

void setup_spi(uint8_t mode, int dord, int interrupt, uint8_t clock) {
  f4:	fb 01       	movw	r30, r22
  // specify pin directions for SPI pins on port B
  if (clock == SPI_SLAVE) { // if slave SS and SCK is input
  f6:	20 3f       	cpi	r18, 0xF0	; 240
  f8:	29 f4       	brne	.+10     	; 0x104 <_Z9setup_spihiih+0x10>
    DDR_SPI &= ~(1<<SPI_MOSI_PIN); // input
  fa:	bb 98       	cbi	0x17, 3	; 23
    DDR_SPI |= (1<<SPI_MISO_PIN); // output
  fc:	bc 9a       	sbi	0x17, 4	; 23
    DDR_SPI &= ~(1<<SPI_SS_PIN); // input
  fe:	ba 98       	cbi	0x17, 2	; 23
    DDR_SPI &= ~(1<<SPI_SCK_PIN);// input
 100:	bd 98       	cbi	0x17, 5	; 23
 102:	05 c0       	rjmp	.+10     	; 0x10e <_Z9setup_spihiih+0x1a>
  } else {
    DDR_SPI |= (1<<SPI_MOSI_PIN); // output
 104:	bb 9a       	sbi	0x17, 3	; 23
    DDR_SPI &= ~(1<<SPI_MISO_PIN); // input
 106:	bc 98       	cbi	0x17, 4	; 23
    DDR_SPI |= (1<<SPI_SCK_PIN);// output
 108:	bd 9a       	sbi	0x17, 5	; 23
    DDR_SPI |= (1<<SPI_SS_PIN);// output
 10a:	ba 9a       	sbi	0x17, 2	; 23
	PORT_SPI |= (1 << SPI_SS_PIN);
 10c:	c2 9a       	sbi	0x18, 2	; 24
    | (dord<<DORD) // LSB or MSB
    | (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
    | (((mode & 0x02) == 0x02) << CPOL) // clock timing mode CPOL
    | (((mode & 0x01)) << CPHA) // clock timing mode CPHA
    | (((clock & 0x02) == 0x02) << SPR1) // cpu clock divisor SPR1
    | ((clock & 0x01) << SPR0); // cpu clock divisor SPR0
 10e:	45 2b       	or	r20, r21
 110:	11 f4       	brne	.+4      	; 0x116 <_Z9setup_spihiih+0x22>
 112:	50 e4       	ldi	r21, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <_Z9setup_spihiih+0x24>
 116:	50 ec       	ldi	r21, 0xC0	; 192
 118:	20 3f       	cpi	r18, 0xF0	; 240
 11a:	11 f4       	brne	.+4      	; 0x120 <_Z9setup_spihiih+0x2c>
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	01 c0       	rjmp	.+2      	; 0x122 <_Z9setup_spihiih+0x2e>
 120:	40 e1       	ldi	r20, 0x10	; 16
 122:	68 2f       	mov	r22, r24
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	81 fd       	sbrc	r24, 1
 128:	02 c0       	rjmp	.+4      	; 0x12e <_Z9setup_spihiih+0x3a>
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	01 c0       	rjmp	.+2      	; 0x130 <_Z9setup_spihiih+0x3c>
 12e:	38 e0       	ldi	r19, 0x08	; 8
 130:	61 70       	andi	r22, 0x01	; 1
 132:	70 70       	andi	r23, 0x00	; 0
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	75 e0       	ldi	r23, 0x05	; 5
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	7a 95       	dec	r23
 144:	e1 f7       	brne	.-8      	; 0x13e <_Z9setup_spihiih+0x4a>
 146:	86 2f       	mov	r24, r22
 148:	8e 2b       	or	r24, r30
 14a:	92 2f       	mov	r25, r18
 14c:	92 70       	andi	r25, 0x02	; 2
 14e:	89 2b       	or	r24, r25
 150:	92 2f       	mov	r25, r18
 152:	91 70       	andi	r25, 0x01	; 1
 154:	89 2b       	or	r24, r25
 156:	85 2b       	or	r24, r21
 158:	84 2b       	or	r24, r20
 15a:	83 2b       	or	r24, r19
 15c:	8d b9       	out	0x0d, r24	; 13
  SPSR = (((clock & 0x04) == 0x04) << SPI2X); // clock divisor SPI2X
 15e:	82 2f       	mov	r24, r18
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	81 70       	andi	r24, 0x01	; 1
 16c:	8e b9       	out	0x0e, r24	; 14

}
 16e:	08 95       	ret

00000170 <_Z8send_spih>:
void disable_spi() {
  SPCR = 0;
}

uint8_t send_spi(uint8_t out) {
  SPDR = out;
 170:	8f b9       	out	0x0f, r24	; 15
  while (!(SPSR & (1<<SPIF)));
 172:	77 9b       	sbis	0x0e, 7	; 14
 174:	fe cf       	rjmp	.-4      	; 0x172 <_Z8send_spih+0x2>
  return SPDR;
 176:	8f b1       	in	r24, 0x0f	; 15
}
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
