
CanHacker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  0080007e  0080007e  000003d8  2**0
                  ALLOC
  3 .stab         00001470  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001837  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	01 c1       	rjmp	.+514    	; 0x21a <__vector_11>
  18:	42 c1       	rjmp	.+644    	; 0x29e <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e2       	ldi	r30, 0x26	; 38
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 37       	cpi	r26, 0x7E	; 126
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e7       	ldi	r26, 0x7E	; 126
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 3b       	cpi	r26, 0xB7	; 183
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	63 c1       	rjmp	.+710    	; 0x322 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
//	}
//}



int main() {
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
	sei();
  64:	78 94       	sei
	DDRD |= (1 << PD1);
  66:	89 9a       	sbi	0x11, 1	; 17
	DDRD &= ~(1 << PD0);
  68:	88 98       	cbi	0x11, 0	; 17


//	UCSRB = (1<<RXEN)|(1<<TXEN);
//	    UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //8 bit, 1 stop bit
	UCSRA =  0b0;
  6a:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0b00011000;
  6c:	88 e1       	ldi	r24, 0x18	; 24
  6e:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32
	//инициализация USART
	serialInit(serialAvailable(), BAUD(9600, F_CPU));
  74:	2a d0       	rcall	.+84     	; 0xca <_Z15serialAvailablev>
  76:	6d e4       	ldi	r22, 0x4D	; 77
  78:	70 e0       	ldi	r23, 0x00	; 0
  7a:	29 d0       	rcall	.+82     	; 0xce <_Z10serialInithj>
	DDRC = 0b00000000001;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	84 bb       	out	0x14, r24	; 20
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  80:	cc e2       	ldi	r28, 0x2C	; 44
  82:	d1 e0       	ldi	r29, 0x01	; 1

		while(1){


		PORTC |=(1<<PC0);
  84:	a8 9a       	sbi	0x15, 0	; 21
  86:	88 e8       	ldi	r24, 0x88	; 136
  88:	93 e1       	ldi	r25, 0x13	; 19
  8a:	fe 01       	movw	r30, r28
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d9 f7       	brne	.-10     	; 0x8a <main+0x2c>
		_delay_ms(500);


		PORTC &=~(1<<PD0);
  94:	a8 98       	cbi	0x15, 0	; 21
  96:	88 e8       	ldi	r24, 0x88	; 136
  98:	93 e1       	ldi	r25, 0x13	; 19
  9a:	fe 01       	movw	r30, r28
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <main+0x3c>
		_delay_ms(500);
		serialWrite(serialAvailable(), 'd');
  a4:	12 d0       	rcall	.+36     	; 0xca <_Z15serialAvailablev>
  a6:	64 e6       	ldi	r22, 0x64	; 100
  a8:	75 d0       	rcall	.+234    	; 0x194 <_Z11serialWritehh>
		serialWriteString(serialAvailable(), "Hello from UART");
  aa:	0f d0       	rcall	.+30     	; 0xca <_Z15serialAvailablev>
  ac:	60 e6       	ldi	r22, 0x60	; 96
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	9e d0       	rcall	.+316    	; 0x1ee <_Z17serialWriteStringhPKc>
			 serialWrite(serialAvailable(), serialAvailable() + '0');
  b2:	0b d0       	rcall	.+22     	; 0xca <_Z15serialAvailablev>
  b4:	18 2f       	mov	r17, r24
  b6:	09 d0       	rcall	.+18     	; 0xca <_Z15serialAvailablev>
  b8:	68 2f       	mov	r22, r24
  ba:	60 5d       	subi	r22, 0xD0	; 208
  bc:	81 2f       	mov	r24, r17
  be:	6a d0       	rcall	.+212    	; 0x194 <_Z11serialWritehh>
			 serialWriteString(serialAvailable(), "... :)\n");
  c0:	04 d0       	rcall	.+8      	; 0xca <_Z15serialAvailablev>
  c2:	60 e7       	ldi	r22, 0x70	; 112
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	93 d0       	rcall	.+294    	; 0x1ee <_Z17serialWriteStringhPKc>
  c8:	dd cf       	rjmp	.-70     	; 0x84 <main+0x26>

000000ca <_Z15serialAvailablev>:
static void serialReceiveInterrupt(uint8_t uart);
static void serialTransmitInterrupt(uint8_t uart);

uint8_t serialAvailable(void) {
    return UART_COUNT;
}
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	08 95       	ret

000000ce <_Z10serialInithj>:
        serialWrite(uart, buf[i] + '0');
    }
}

void serialInit(uint8_t uart, uint16_t baud) {
    if (uart >= UART_COUNT) {
  ce:	88 23       	and	r24, r24
  d0:	e1 f4       	brne	.+56     	; 0x10a <_Z10serialInithj+0x3c>
        return;
    }

    // Initialize state variables
    rxRead[uart] = 0;
  d2:	10 92 b6 00 	sts	0x00B6, r1
  d6:	10 92 b5 00 	sts	0x00B5, r1
    rxWrite[uart] = 0;
  da:	10 92 94 00 	sts	0x0094, r1
  de:	10 92 93 00 	sts	0x0093, r1
    txRead[uart] = 0;
  e2:	10 92 7f 00 	sts	0x007F, r1
  e6:	10 92 7e 00 	sts	0x007E, r1
    txWrite[uart] = 0;
  ea:	10 92 81 00 	sts	0x0081, r1
  ee:	10 92 80 00 	sts	0x0080, r1
    shouldStartTransmission[uart] = 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 92 00 	sts	0x0092, r24

#ifndef UART_XMEGA

    // Default Configuration: 8N1
    *serialRegisters[uart][SERIALC] = (1 << serialBits[uart][SERIALUCSZ0])
            | (1 << serialBits[uart][SERIALUCSZ1]);
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	80 bd       	out	0x20, r24	; 32

    // Set baudrate
#if SERIALBAUDBIT == 8
    *serialRegisters[uart][SERIALUBRRH] = (baud >> 8);
  fc:	70 bd       	out	0x20, r23	; 32
    *serialRegisters[uart][SERIALUBRRL] = baud;
  fe:	69 b9       	out	0x09, r22	; 9
#else // SERIALBAUDBIT == 8
    *serialBaudRegisters[uart] = baud;
#endif // SERIALBAUDBIT == 8

    // Enable Interrupts
    *serialRegisters[uart][SERIALB] = (1 << serialBits[uart][SERIALRXCIE]);
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	8a b9       	out	0x0a, r24	; 10

    // Enable Receiver/Transmitter
    *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALRXEN])
            | (1 << serialBits[uart][SERIALTXEN]);
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	88 61       	ori	r24, 0x18	; 24
 108:	8a b9       	out	0x0a, r24	; 10
 10a:	08 95       	ret

0000010c <_Z18serialRxBufferFullh>:
        return 0;
    }
}

uint8_t serialRxBufferFull(uint8_t uart) {
    if (uart >= UART_COUNT) {
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <_Z18serialRxBufferFullh+0x8>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
        return 0;
    }

    return (((rxWrite[uart] + 1) == rxRead[uart])
            || ((rxRead[uart] == 0) && ((rxWrite[uart] + 1) == RX_BUFFER_SIZE)));
 114:	80 91 93 00 	lds	r24, 0x0093
 118:	90 91 94 00 	lds	r25, 0x0094
 11c:	20 91 b5 00 	lds	r18, 0x00B5
 120:	30 91 b6 00 	lds	r19, 0x00B6
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	82 17       	cp	r24, r18
 128:	93 07       	cpc	r25, r19
 12a:	79 f0       	breq	.+30     	; 0x14a <_Z18serialRxBufferFullh+0x3e>
 12c:	80 91 b5 00 	lds	r24, 0x00B5
 130:	90 91 b6 00 	lds	r25, 0x00B6
 134:	89 2b       	or	r24, r25
 136:	11 f0       	breq	.+4      	; 0x13c <_Z18serialRxBufferFullh+0x30>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	08 c0       	rjmp	.+16     	; 0x14c <_Z18serialRxBufferFullh+0x40>
 13c:	80 91 93 00 	lds	r24, 0x0093
 140:	90 91 94 00 	lds	r25, 0x0094
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	4f 97       	sbiw	r24, 0x1f	; 31
 148:	09 f4       	brne	.+2      	; 0x14c <_Z18serialRxBufferFullh+0x40>
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	82 2f       	mov	r24, r18
}
 14e:	08 95       	ret

00000150 <_Z18serialTxBufferFullh>:
        }
    }
}

uint8_t serialTxBufferFull(uint8_t uart) {
    if (uart >= UART_COUNT) {
 150:	88 23       	and	r24, r24
 152:	11 f0       	breq	.+4      	; 0x158 <_Z18serialTxBufferFullh+0x8>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
        return 0;
    }

    return (((txWrite[uart] + 1) == txRead[uart])
            || ((txRead[uart] == 0) && ((txWrite[uart] + 1) == TX_BUFFER_SIZE)));
 158:	80 91 80 00 	lds	r24, 0x0080
 15c:	90 91 81 00 	lds	r25, 0x0081
 160:	20 91 7e 00 	lds	r18, 0x007E
 164:	30 91 7f 00 	lds	r19, 0x007F
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	82 17       	cp	r24, r18
 16c:	93 07       	cpc	r25, r19
 16e:	79 f0       	breq	.+30     	; 0x18e <_Z18serialTxBufferFullh+0x3e>
 170:	80 91 7e 00 	lds	r24, 0x007E
 174:	90 91 7f 00 	lds	r25, 0x007F
 178:	89 2b       	or	r24, r25
 17a:	11 f0       	breq	.+4      	; 0x180 <_Z18serialTxBufferFullh+0x30>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	08 c0       	rjmp	.+16     	; 0x190 <_Z18serialTxBufferFullh+0x40>
 180:	80 91 80 00 	lds	r24, 0x0080
 184:	90 91 81 00 	lds	r25, 0x0081
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	0f 97       	sbiw	r24, 0x0f	; 15
 18c:	09 f4       	brne	.+2      	; 0x190 <_Z18serialTxBufferFullh+0x40>
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	82 2f       	mov	r24, r18
}
 192:	08 95       	ret

00000194 <_Z11serialWritehh>:

// ----------------------
// |    Transmission    |
// ----------------------

void serialWrite(uint8_t uart, uint8_t data) {
 194:	1f 93       	push	r17
 196:	16 2f       	mov	r17, r22
    if (uart >= UART_COUNT) {
 198:	88 23       	and	r24, r24
 19a:	39 f5       	brne	.+78     	; 0x1ea <_Z11serialWritehh+0x56>
#ifdef SERIALINJECTCR
    if (data == '\n') {
        serialWrite(uart, '\r');
    }
#endif
    while (serialTxBufferFull(uart));
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	d8 df       	rcall	.-80     	; 0x150 <_Z18serialTxBufferFullh>
 1a0:	88 23       	and	r24, r24
 1a2:	e1 f7       	brne	.-8      	; 0x19c <_Z11serialWritehh+0x8>

    txBuffer[uart][txWrite[uart]] = data;
 1a4:	e0 91 80 00 	lds	r30, 0x0080
 1a8:	f0 91 81 00 	lds	r31, 0x0081
 1ac:	ee 57       	subi	r30, 0x7E	; 126
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	10 83       	st	Z, r17
    if (txWrite[uart] < (TX_BUFFER_SIZE - 1)) {
 1b2:	80 91 80 00 	lds	r24, 0x0080
 1b6:	90 91 81 00 	lds	r25, 0x0081
 1ba:	0f 97       	sbiw	r24, 0x0f	; 15
 1bc:	50 f4       	brcc	.+20     	; 0x1d2 <_Z11serialWritehh+0x3e>
        txWrite[uart]++;
 1be:	80 91 80 00 	lds	r24, 0x0080
 1c2:	90 91 81 00 	lds	r25, 0x0081
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 81 00 	sts	0x0081, r25
 1cc:	80 93 80 00 	sts	0x0080, r24
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <_Z11serialWritehh+0x46>
    } else {
        txWrite[uart] = 0;
 1d2:	10 92 81 00 	sts	0x0081, r1
 1d6:	10 92 80 00 	sts	0x0080, r1
    }
    if (shouldStartTransmission[uart]) {
 1da:	80 91 92 00 	lds	r24, 0x0092
 1de:	88 23       	and	r24, r24
 1e0:	21 f0       	breq	.+8      	; 0x1ea <_Z11serialWritehh+0x56>
        shouldStartTransmission[uart] = 0;
 1e2:	10 92 92 00 	sts	0x0092, r1

#ifndef UART_XMEGA
        // Enable Interrupt
        *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]);
 1e6:	55 9a       	sbi	0x0a, 5	; 10

        // Trigger Interrupt
        *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]);
 1e8:	5d 9a       	sbi	0x0b, 5	; 11

        // Trigger Interrupt
        serialTransmitInterrupt(uart);
#endif // UART_XMEGA
    }
}
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <_Z17serialWriteStringhPKc>:

void serialWriteString(uint8_t uart, const char *data) {
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	eb 01       	movw	r28, r22
    if (uart >= UART_COUNT) {
 1f4:	88 23       	and	r24, r24
 1f6:	71 f4       	brne	.+28     	; 0x214 <_Z17serialWriteStringhPKc+0x26>
        return;
    }

    if (data == 0) {
 1f8:	61 15       	cp	r22, r1
 1fa:	71 05       	cpc	r23, r1
 1fc:	41 f0       	breq	.+16     	; 0x20e <_Z17serialWriteStringhPKc+0x20>
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <_Z17serialWriteStringhPKc+0x18>
        serialWriteString(uart, "NULL");
    } else {
        while (*data != '\0') {
            serialWrite(uart, *data++);
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	c7 df       	rcall	.-114    	; 0x194 <_Z11serialWritehh>
    }

    if (data == 0) {
        serialWriteString(uart, "NULL");
    } else {
        while (*data != '\0') {
 206:	68 81       	ld	r22, Y
 208:	66 23       	and	r22, r22
 20a:	d1 f7       	brne	.-12     	; 0x200 <_Z17serialWriteStringhPKc+0x12>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <_Z17serialWriteStringhPKc+0x26>
 20e:	c8 e7       	ldi	r28, 0x78	; 120
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	f9 cf       	rjmp	.-14     	; 0x206 <_Z17serialWriteStringhPKc+0x18>
            serialWrite(uart, *data++);
        }
    }
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <__vector_11>:
#define ISR_TX(n) \
    ISR(SERIALTRANSMITINTERRUPT ## n) { \
        serialTransmitInterrupt(n); \
    }

ISR_RX(0)
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
// |      Internal      |
// ----------------------

static void serialReceiveInterrupt(uint8_t uart) {
#ifndef UART_XMEGA
    rxBuffer[uart][rxWrite[uart]] = *serialRegisters[uart][SERIALDATA];
 23c:	e0 91 93 00 	lds	r30, 0x0093
 240:	f0 91 94 00 	lds	r31, 0x0094
 244:	8c b1       	in	r24, 0x0c	; 12
 246:	eb 56       	subi	r30, 0x6B	; 107
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	80 83       	st	Z, r24
#else // UART_XMEGA
    rxBuffer[uart][rxWrite[uart]] = serialRegisters[uart]->DATA;
#endif // UART_XMEGA

    // Simply skip increasing the write pointer if the receive buffer is overflowing
    if (!serialRxBufferFull(uart)) {
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	5e df       	rcall	.-324    	; 0x10c <_Z18serialRxBufferFullh>
 250:	88 23       	and	r24, r24
 252:	a1 f4       	brne	.+40     	; 0x27c <__vector_11+0x62>
        if (rxWrite[uart] < (RX_BUFFER_SIZE - 1)) {
 254:	80 91 93 00 	lds	r24, 0x0093
 258:	90 91 94 00 	lds	r25, 0x0094
 25c:	4f 97       	sbiw	r24, 0x1f	; 31
 25e:	50 f4       	brcc	.+20     	; 0x274 <__vector_11+0x5a>
            rxWrite[uart]++;
 260:	80 91 93 00 	lds	r24, 0x0093
 264:	90 91 94 00 	lds	r25, 0x0094
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 94 00 	sts	0x0094, r25
 26e:	80 93 93 00 	sts	0x0093, r24
 272:	04 c0       	rjmp	.+8      	; 0x27c <__vector_11+0x62>
        } else {
            rxWrite[uart] = 0;
 274:	10 92 94 00 	sts	0x0094, r1
 278:	10 92 93 00 	sts	0x0093, r1
#define ISR_TX(n) \
    ISR(SERIALTRANSMITINTERRUPT ## n) { \
        serialTransmitInterrupt(n); \
    }

ISR_RX(0)
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_12>:
ISR_TX(0)
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
        serialRegisters[uart]->DATA = sendThisNext[uart];
#endif // UART_XMEGA
        sendThisNext[uart] = 0;
    } else {
#endif // FLOWCONTROL
        if (txRead[uart] != txWrite[uart]) {
 2b4:	20 91 7e 00 	lds	r18, 0x007E
 2b8:	30 91 7f 00 	lds	r19, 0x007F
 2bc:	80 91 80 00 	lds	r24, 0x0080
 2c0:	90 91 81 00 	lds	r25, 0x0081
 2c4:	28 17       	cp	r18, r24
 2c6:	39 07       	cpc	r19, r25
 2c8:	e9 f0       	breq	.+58     	; 0x304 <__vector_12+0x66>
#ifndef UART_XMEGA
            *serialRegisters[uart][SERIALDATA] = txBuffer[uart][txRead[uart]];
 2ca:	e0 91 7e 00 	lds	r30, 0x007E
 2ce:	f0 91 7f 00 	lds	r31, 0x007F
 2d2:	ee 57       	subi	r30, 0x7E	; 126
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	8c b9       	out	0x0c, r24	; 12
#else // UART_XMEGA
            serialRegisters[uart]->DATA = txBuffer[uart][txRead[uart]];
#endif // UART_XMEGA
            if (txRead[uart] < (TX_BUFFER_SIZE -1)) {
 2da:	80 91 7e 00 	lds	r24, 0x007E
 2de:	90 91 7f 00 	lds	r25, 0x007F
 2e2:	0f 97       	sbiw	r24, 0x0f	; 15
 2e4:	50 f4       	brcc	.+20     	; 0x2fa <__vector_12+0x5c>
                txRead[uart]++;
 2e6:	80 91 7e 00 	lds	r24, 0x007E
 2ea:	90 91 7f 00 	lds	r25, 0x007F
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	90 93 7f 00 	sts	0x007F, r25
 2f4:	80 93 7e 00 	sts	0x007E, r24
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <__vector_12+0x6e>
            } else {
                txRead[uart] = 0;
 2fa:	10 92 7f 00 	sts	0x007F, r1
 2fe:	10 92 7e 00 	sts	0x007E, r1
 302:	04 c0       	rjmp	.+8      	; 0x30c <__vector_12+0x6e>
            }
        } else {
            shouldStartTransmission[uart] = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 92 00 	sts	0x0092, r24

            // Disable Interrupt
#ifndef UART_XMEGA
            *serialRegisters[uart][SERIALB] &= ~(1 << serialBits[uart][SERIALUDRIE]);
 30a:	55 98       	cbi	0x0a, 5	; 10
    ISR(SERIALTRANSMITINTERRUPT ## n) { \
        serialTransmitInterrupt(n); \
    }

ISR_RX(0)
ISR_TX(0)
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
